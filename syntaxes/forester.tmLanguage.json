{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "forester",
	"patterns": [
		{
			"include": "#meta_import"
		},
		{
			"include": "#meta_action_definition"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#types"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#flow_nodes"
		},
		{
			"include": "#decorator_nodes"
		},
		{
			"include": "#action_nodes"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#constants"
		}
	],
	"repository": {
		"identifier": {
			"patterns": [
				{
					"name": "variable.other.forester",
					"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.boolean.forester",
					"match": "\\b(TRUE|FALSE)\\b"
				}
			]
		},
		"flow_nodes": {
			"patterns": [
				{
					"name": "keyword.other.node.flow.forester",
					"match": "\\b(parallel|sequence|m_sequence|r_sequence|fallback|r_fallback)\\b"
				}
			]
		},
		"decorator_nodes": {
			"patterns": [
				{
					"name": "keyword.other.node.decorator.forester",
					"match": "\\b(inverter|force_success|force_fail|repeat|retry|timeout|delay)\\b"
				}
			]
		},
		"action_nodes": {
			"patterns": [
				{
					"name": "keyword.other.node.action.builtin.forester",
					"match": "\\b(fail|fail_empty|success|running|sleep|store|equal|store_tick|lock|unlock|http_get)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other.action.forester",
					"match": "\\b(impl|cond)\\b"
				},
				{
					"name": "keyword.other.root.forester",
					"match": "\\broot\\b"
				}
			]
		},
		"imports": {
			"patterns": [
				{
					"name": "keyword.other.import.forester",
					"match": "\\bimport\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.forester",
					"match": "\\b(array|num|object|string|bool|tree)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.forester",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.forester",
					"match": "\\\\[\"\\\\/bfnrt]|\\\\u[0-9a-fA-F]{4}"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.forester",
					"match": "-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.forester",
					"match": "="
				},
				{
					"name": "keyword.operator.arrow.forester",
					"match": "=>"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.separator.forester",
					"match": "[,;]"
				},
				{
					"name": "punctuation.brackets.forester",
					"match": "[\\[\\]\\(\\){}]"
				},
				{
					"name": "punctuation.accessor.forester",
					"match": "\\.\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.forester",
					"match": "//[^\\r\\n]*"
				},
				{
					"name": "comment.block.forester",
					"begin": "/\\*",
					"end": "\\*/",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.forester"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.forester"
						}
					}
				}
			]
		},
		"meta_import": {
			"name": "meta.import.forester",
			"begin": "\\bimport\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.import.forester"
				}
			},
			"end": "$",
			"patterns": [
				{
					"include": "#strings"
				}
			]
		}
	},
	"scopeName": "source.forester"
}